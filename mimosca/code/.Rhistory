stopifnot(rankMatrix(X)[[1]]==dim(X)[2])  # check that X is full rank
stopifnot(is.list(lambda))
y = as.matrix(y)
if (mean(y) != 0) {
y = y - mean(y)
}
p = ncol(X)
for (l in unlist(lambda)) {
ridges.l = solve(t(X) %*% X + diag(l, p)) %*% t(X) %*% y %>% `rownames<-`(colnames(X)) %>% t %>% as_tibble %>% mutate(lambda=l)
if (l == unlist(lambda)[1]) {
ridges = ridges.l
} else {
ridges = bind_rows(ridges, ridges.l)
}
}
ridges <- ridges %>% gather(!lambda, key="coef", value="val")
ggplot(ridges, aes(x=lambda, y=val, group=coef, color=coef)) +
geom_line() +
xlab("coefficient")
}
data("mtcars")
y <- mtcars %>% pull(mpg)
X <- mtcars %>% select(cyl, disp, hp, drat, wt) %>% as.matrix
lambda <- list(seq(0, 100, by=0.1))
my.ridge(y, X, lambda)
y <- mtcars %>% pull(mpg)
y <- y - mean(y)
X <- mtcars %>% select(cyl, disp, hp, drat, wt) %>% as.matrix
X <- apply(X, 2, function(z) (z - mean(z))/sd(z) )
lambda <- list(seq(0, 100, by=0.1))
my.ridge(y, X, lambda)
my.ridge <- function(y, X, lambda) {
stopifnot(is.matrix(X) & is.vector(y))  # check that X is a matrix and y is a vector
stopifnot(length(y) == dim(X)[1])  # check that X and y have the right dimensions
stopifnot(sum(is.na(X) | is.infinite(X))==0)  # check that X has no NA or Inf values
stopifnot(sum(is.na(y) | is.infinite(y))==0)  # check that y has no NA or Inf values
stopifnot(is.numeric(X) & is.numeric(y))  # check that X and y are numeric
stopifnot(rankMatrix(X)[[1]]==dim(X)[2])  # check that X is full rank
stopifnot(is.list(lambda))
y = as.matrix(y)
p = ncol(X)
for (l in unlist(lambda)) {
ridges.l = solve(t(X) %*% X + diag(l, p)) %*% t(X) %*% y %>% `rownames<-`(colnames(X)) %>% t %>% as_tibble %>% mutate(lambda=l)
if (l == unlist(lambda)[1]) {
ridges = ridges.l
} else {
ridges = bind_rows(ridges, ridges.l)
}
}
ridges <- ridges %>% gather(!lambda, key="coef", value="val")
ggplot(ridges, aes(x=lambda, y=val, group=coef, color=coef)) +
geom_line() +
xlab("coefficient")
}
data(mtcars)
y <- mtcars %>% pull(mpg)
y <- y - mean(y)
X <- mtcars %>% select(cyl, disp, hp, drat, wt) %>% as.matrix
X <- apply(X, 2, function(z) (z - mean(z))/sd(z) )
lambda <- list(seq(0, 100, by=0.1))
my.ridge(y, X, lambda)
my.ridge <- function(y, X, lambda) {
stopifnot(is.matrix(X) & is.vector(y))  # check that X is a matrix and y is a vector
stopifnot(length(y) == dim(X)[1])  # check that X and y have the right dimensions
stopifnot(sum(is.na(X) | is.infinite(X))==0)  # check that X has no NA or Inf values
stopifnot(sum(is.na(y) | is.infinite(y))==0)  # check that y has no NA or Inf values
stopifnot(is.numeric(X) & is.numeric(y))  # check that X and y are numeric
stopifnot(rankMatrix(X)[[1]]==dim(X)[2])  # check that X is full rank
stopifnot(is.list(lambda))
y = as.matrix(y)
p = ncol(X)
for (l in unlist(lambda)) {
ridges.l = solve(t(X) %*% X + diag(l, p)) %*% t(X) %*% y %>% `rownames<-`(colnames(X)) %>% t %>% as_tibble %>% mutate(lambda=l)
if (l == unlist(lambda)[1]) {
ridges = ridges.l
} else {
ridges = bind_rows(ridges, ridges.l)
}
}
ridges <- ridges %>% gather(!lambda, key="coef", value="val")
ggplot(ridges, aes(x=lambda, y=val, group=coef, color=coef)) +
geom_line() +
xtitle("coefficient")
}
data(mtcars)
y <- mtcars %>% pull(mpg)
y <- y - mean(y)
X <- mtcars %>% select(cyl, disp, hp, drat, wt) %>% as.matrix
X <- apply(X, 2, function(z) (z - mean(z))/sd(z) )
lambda <- list(seq(0, 100, by=0.1))
my.ridge(y, X, lambda)
my.ridge <- function(y, X, lambda) {
stopifnot(is.matrix(X) & is.vector(y))  # check that X is a matrix and y is a vector
stopifnot(length(y) == dim(X)[1])  # check that X and y have the right dimensions
stopifnot(sum(is.na(X) | is.infinite(X))==0)  # check that X has no NA or Inf values
stopifnot(sum(is.na(y) | is.infinite(y))==0)  # check that y has no NA or Inf values
stopifnot(is.numeric(X) & is.numeric(y))  # check that X and y are numeric
stopifnot(rankMatrix(X)[[1]]==dim(X)[2])  # check that X is full rank
stopifnot(is.list(lambda))
y = as.matrix(y)
p = ncol(X)
for (l in unlist(lambda)) {
ridges.l = solve(t(X) %*% X + diag(l, p)) %*% t(X) %*% y %>% `rownames<-`(colnames(X)) %>% t %>% as_tibble %>% mutate(lambda=l)
if (l == unlist(lambda)[1]) {
ridges = ridges.l
} else {
ridges = bind_rows(ridges, ridges.l)
}
}
ridges <- ridges %>% gather(!lambda, key="coef", value="val")
ggplot(ridges, aes(x=lambda, y=val, group=coef, color=coef)) +
geom_line() +
xlab("coefficient")
}
data(mtcars)
y <- mtcars %>% pull(mpg)
y <- y - mean(y)
X <- mtcars %>% select(cyl, disp, hp, drat, wt) %>% as.matrix
X <- apply(X, 2, function(z) (z - mean(z))/sd(z) )
lambda <- list(seq(0, 100, by=0.1))
my.ridge(y, X, lambda)
my.ridge <- function(y, X, lambda) {
stopifnot(is.matrix(X) & is.vector(y))  # check that X is a matrix and y is a vector
stopifnot(length(y) == dim(X)[1])  # check that X and y have the right dimensions
stopifnot(sum(is.na(X) | is.infinite(X))==0)  # check that X has no NA or Inf values
stopifnot(sum(is.na(y) | is.infinite(y))==0)  # check that y has no NA or Inf values
stopifnot(is.numeric(X) & is.numeric(y))  # check that X and y are numeric
stopifnot(rankMatrix(X)[[1]]==dim(X)[2])  # check that X is full rank
stopifnot(is.list(lambda))
y = as.matrix(y)
p = ncol(X)
for (l in unlist(lambda)) {
ridges.l = solve(t(X) %*% X + diag(l, p)) %*% t(X) %*% y %>% `rownames<-`(colnames(X)) %>% t %>% as_tibble %>% mutate(lambda=l)
if (l == unlist(lambda)[1]) {
ridges = ridges.l
} else {
ridges = bind_rows(ridges, ridges.l)
}
}
ridges <- ridges %>% gather(!lambda, key="coef", value="val")
ggplot(ridges, aes(x=lambda, y=val, group=coef, color=coef)) +
geom_line() +
ylab("coefficient")
}
data(mtcars)
y <- mtcars %>% pull(mpg)
y <- y - mean(y)
X <- mtcars %>% select(cyl, disp, hp, drat, wt) %>% as.matrix
X <- apply(X, 2, function(z) (z - mean(z))/sd(z) )
lambda <- list(seq(0, 100, by=0.1))
my.ridge(y, X, lambda)
data(swiss)
y <- swiss[,1]
y <- y - mean(y)
X <- swiss[,-1]
X <- apply(X, 2, function(z) (z - mean(z))/sd(z) )
lambda <- list(seq(0, 100, by=0.1))
my.ridge(y, X, lambda)
?svd
y = as.matrix(y)
y <- y - mean(y)
X <- apply(X, 2, function(z) (z - mean(z))/sd(z) )
pcs <- svd(X, nu=npcs)
npcs=5
y = as.matrix(y)
y <- y - mean(y)
X <- apply(X, 2, function(z) (z - mean(z))/sd(z) )
pcs <- svd(X, nu=npcs)
d.scree <- pcs$d
d.scree <- pcs$d^2 / sum(pcs$d^2)
plot(cumsum(d.scree))
pcs <- svd(X)
d.scree <- pcs$d^2 / sum(pcs$d^2)
plot(cumsum(d.scree))
plot(cumsum(d.scree), ylab="cum. PVE")
plot(cumsum(d.scree), ylab="cumulative PVE")
plot(cumsum(d.scree), xlab="Num PCs", ylab="cumulative PVE")
yhat <- t(svd$u) %*% y
t(svd$u)
yhat <- t(pcs$u) %*% y
pcs$u
yhat <- t(pcs$v) %*% y
yhat <- t(pcs$u) %*% y
Z <- X %*% pcs$v
pcs <- svd(X, nv=1)
d.scree <- pcs$d^2 / sum(pcs$d^2)
plot(cumsum(d.scree), xlab="Num PCs", ylab="cumulative PVE")
Z <- X %*% pcs$v
pcs$d^(-2)
yhat <- Z %*% pcs$d^(-2) %*% t(Z) %*% y
Z <- X %*% pcs$v
yhat <- Z %*% pcs$d^(-2) %*% t(Z) %*% y
t(Z) %*% y
Z %*% pcs$d^(-2)
Z %*% pcs$d^(-2) %*% t(Z)
Z %*% pcs$d^(-2)
yhat <- Z %*% solve(t(Z) %*% Z) %*% t(Z) %*% y
npcs=3
pcs <- svd(X, nv=npcs)
d.scree <- pcs$d^2 / sum(pcs$d^2)
plot(cumsum(d.scree), xlab="Num PCs", ylab="cumulative PVE")
Z <- X %*% pcs$v
yhat <- Z %*% solve(t(Z) %*% Z) %*% t(Z) %*% y
?plot
plot(pcs$v)
arrows(pcs$v)
floads <- tibble(pcs$v)
floads <- as_tibble(pcs$v)
names(pcs$v)
colnames(X)
floads <- as_tibble(pcs$v) %>% mutate(coef=colnames(X))
floads <- as_tibble(pcs$v) %>%
`colnames<-`(paste0("PC", seq(1, npcs))) %>%
mutate(coef=colnames(X))
floads <- as_tibble(pcs$v) %>%
`colnames<-`(paste0("PC", seq(1, npcs))) %>%
mutate(coef=colnames(X))
floads <- as_tibble(pcs$v) %>%
`colnames<-`(paste0("PC", seq(1, npcs))) %>%
mutate(coef=colnames(X)) %>% relocate(coef)
floads <- as_tibble(pcs$v) %>%
`colnames<-`(paste0("PC", seq(1, npcs))) %>%
mutate(coef=colnames(X)) %>% relocate(coef)
plot(pcs$v)
plot(pcs$v)
arrows(x0=rep(0, ncol(X)), y0=rep(0, ncol(X)), x1=pcs$v[,1], y1=pcs$v[,2])
ggplot(floads) + geom_point(aes(x=PC1, y=PC2))
ggplot(floads) + geom_point(aes(x=PC1, y=PC2)) +
annotate("text", x=PC1,y=PC2,label=coef)
ggplot(floads) + geom_point(aes(x=PC1, y=PC2)) +
annotate("text", x=floads$PC1,y=floads$PC2,label=floads$coef)
ggplot(floads) + geom_point(aes(x=PC1, y=PC2)) +
annotate("text", x=floads$PC1 + 0.5,y=floads$PC2,label=floads$coef)
ggplot(floads) + geom_point(aes(x=PC1, y=PC2)) +
annotate("text", x=floads$PC1 + 0.1,y=floads$PC2,label=floads$coef)
ggplot(floads) + geom_point(aes(x=PC1, y=PC2)) +
annotate("text", x=floads$PC1 + 0.05,y=floads$PC2,label=floads$coef)
annotate("text", x=floads$PC1 + 0.1,y=floads$PC2,label=floads$coef)
ggplot(floads) + geom_point(aes(x=PC1, y=PC2)) +
annotate("text", x=floads$PC1 + 0.1,y=floads$PC2,label=floads$coef)
ggplot(floads) + geom_point(aes(x=PC1, y=PC2)) +
annotate("text", x=floads$PC1 + 0.12,y=floads$PC2,label=floads$coef)
my.pca <- function(y, X, npcs=3) {
stopifnot(is.matrix(X) & is.vector(y))  # check that X is a matrix and y is a vector
stopifnot(length(y) == dim(X)[1])  # check that X and y have the right dimensions
stopifnot(sum(is.na(X) | is.infinite(X))==0)  # check that X has no NA or Inf values
stopifnot(sum(is.na(y) | is.infinite(y))==0)  # check that y has no NA or Inf values
stopifnot(is.numeric(X) & is.numeric(y))  # check that X and y are numeric
stopifnot(rankMatrix(X)[[1]]==dim(X)[2])  # check that X is full rank
stopifnot(is.list(lambda))
y = as.matrix(y)
y <- y - mean(y)
X <- apply(X, 2, function(z) (z - mean(z))/sd(z) )
pcs <- svd(X, nv=npcs)
d.scree <- pcs$d^2 / sum(pcs$d^2)
Z <- X %*% pcs$v
yhat <- Z %*% solve(t(Z) %*% Z) %*% t(Z) %*% y
# pve visualization
plot(cumsum(d.scree), xlab="Num PCs", ylab="cumulative PVE", main="Percent Variance Explained")
# factor loadings visualization
floads <- as_tibble(pcs$v) %>%
`colnames<-`(paste0("PC", seq(1, npcs))) %>%
mutate(coef=colnames(X)) %>% relocate(coef)
ggplot(floads) + geom_point(aes(x=PC1, y=PC2)) +
annotate("text", x=floads$PC1 + 0.12,y=floads$PC2,label=floads$coef)
#
}
data(mtcars)
y <- mtcars %>% pull(mpg)
X <- mtcars %>% select(cyl, disp, hp, drat, wt) %>% as.matrix
npcs <- 2
my.pca(y, X, npcs)
loads <- as_tibble(Z)
loads <- as_tibble(Z) %>%
`colnames<-`(paste0("PC", seq(1, npcs))) %>%
mutate(coef=colnames(X)) %>% relocate(coef)
my.pca <- function(y, X, npcs=3) {
stopifnot(is.matrix(X) & is.vector(y))  # check that X is a matrix and y is a vector
stopifnot(length(y) == dim(X)[1])  # check that X and y have the right dimensions
stopifnot(sum(is.na(X) | is.infinite(X))==0)  # check that X has no NA or Inf values
stopifnot(sum(is.na(y) | is.infinite(y))==0)  # check that y has no NA or Inf values
stopifnot(is.numeric(X) & is.numeric(y))  # check that X and y are numeric
stopifnot(rankMatrix(X)[[1]]==dim(X)[2])  # check that X is full rank
stopifnot(is.list(lambda))
y = as.matrix(y)
y <- y - mean(y)
X <- apply(X, 2, function(z) (z - mean(z))/sd(z) )
pcs <- svd(X, nv=npcs)
d.scree <- pcs$d^2 / sum(pcs$d^2)
Z <- X %*% pcs$v
yhat <- Z %*% solve(t(Z) %*% Z) %*% t(Z) %*% y
# pve visualization
plot(cumsum(d.scree), xlab="Num PCs", ylab="cumulative PVE", main="Percent Variance Explained")
# factor loadings visualization
floads <- as_tibble(pcs$v) %>%
`colnames<-`(paste0("PC", seq(1, npcs))) %>%
mutate(coef=colnames(X)) %>% relocate(coef)
ggplot(floads) + geom_point(aes(x=PC1, y=PC2)) +
annotate("text", x=floads$PC1 + 0.12,y=floads$PC2,label=floads$coef)
# loadings visualization
loads <- as_tibble(Z) %>%
`colnames<-`(paste0("PC", seq(1, npcs))) %>%
mutate(coef=colnames(X)) %>% relocate(coef)
ggplot(floads) + geom_point(aes(x=PC1, y=PC2))
}
data(mtcars)
y <- mtcars %>% pull(mpg)
X <- mtcars %>% select(cyl, disp, hp, drat, wt) %>% as.matrix
npcs <- 2
my.pca(y, X, npcs)
data(mtcars)
y <- mtcars %>% pull(mpg)
X <- mtcars %>% select(cyl, disp, hp, drat, wt) %>% as.matrix
npcs <- 2
y = as.matrix(y)
y <- y - mean(y)
X <- apply(X, 2, function(z) (z - mean(z))/sd(z) )
pcs <- svd(X, nv=npcs)
d.scree <- pcs$d^2 / sum(pcs$d^2)
Z <- X %*% pcs$v
yhat <- Z %*% solve(t(Z) %*% Z) %*% t(Z) %*% y
# pve visualization
plot(cumsum(d.scree), xlab="Num PCs", ylab="cumulative PVE", main="Percent Variance Explained")
# factor loadings visualization
floads <- as_tibble(pcs$v) %>%
`colnames<-`(paste0("PC", seq(1, npcs))) %>%
mutate(coef=colnames(X)) %>% relocate(coef)
ggplot(floads) + geom_point(aes(x=PC1, y=PC2)) +
annotate("text", x=floads$PC1 + 0.12,y=floads$PC2,label=floads$coef)
# loadings visualization
loads <- as_tibble(Z) %>%
`colnames<-`(paste0("PC", seq(1, npcs))) %>%
mutate(coef=colnames(X)) %>% relocate(coef)
loads <- as_tibble(Z)
loads <- as_tibble(Z) %>%
`colnames<-`(paste0("PC", seq(1, npcs)))
loads <- as_tibble(Z) %>%
`colnames<-`(paste0("PC", seq(1, npcs))) %>%
mutate(ind=rownames(X)) %>% relocate(ind)
ggplot(floads) + geom_point(aes(x=PC1, y=PC2))
ggplot(loads) + geom_point(aes(x=PC1, y=PC2))
my.pca <- function(y, X, npcs=3) {
stopifnot(is.matrix(X) & is.vector(y))  # check that X is a matrix and y is a vector
stopifnot(length(y) == dim(X)[1])  # check that X and y have the right dimensions
stopifnot(sum(is.na(X) | is.infinite(X))==0)  # check that X has no NA or Inf values
stopifnot(sum(is.na(y) | is.infinite(y))==0)  # check that y has no NA or Inf values
stopifnot(is.numeric(X) & is.numeric(y))  # check that X and y are numeric
stopifnot(rankMatrix(X)[[1]]==dim(X)[2])  # check that X is full rank
stopifnot(is.list(lambda))
y = as.matrix(y)
y <- y - mean(y)
X <- apply(X, 2, function(z) (z - mean(z))/sd(z) )
pcs <- svd(X, nv=npcs)
d.scree <- pcs$d^2 / sum(pcs$d^2)
Z <- X %*% pcs$v
yhat <- Z %*% solve(t(Z) %*% Z) %*% t(Z) %*% y
# pve visualization
plot(cumsum(d.scree), xlab="Num PCs", ylab="cumulative PVE", main="Percent Variance Explained")
# factor loadings visualization
floads <- as_tibble(pcs$v) %>%
`colnames<-`(paste0("PC", seq(1, npcs))) %>%
mutate(coef=colnames(X)) %>% relocate(coef)
ggplot(floads) + geom_point(aes(x=PC1, y=PC2)) +
annotate("text", x=floads$PC1 + 0.12,y=floads$PC2,label=floads$coef)
# loadings visualization
loads <- as_tibble(Z) %>%
`colnames<-`(paste0("PC", seq(1, npcs))) %>%
mutate(ind=rownames(X)) %>% relocate(ind)
ggplot(loads) + geom_point(aes(x=PC1, y=PC2))
}
data(mtcars)
y <- mtcars %>% pull(mpg)
X <- mtcars %>% select(cyl, disp, hp, drat, wt) %>% as.matrix
npcs <- 2
my.pca(y, X, npcs)
library(tidyverse)
library(Matrix)
library(patchwork)
my.pca <- function(y, X, npcs=3) {
stopifnot(is.matrix(X) & is.vector(y))  # check that X is a matrix and y is a vector
stopifnot(length(y) == dim(X)[1])  # check that X and y have the right dimensions
stopifnot(sum(is.na(X) | is.infinite(X))==0)  # check that X has no NA or Inf values
stopifnot(sum(is.na(y) | is.infinite(y))==0)  # check that y has no NA or Inf values
stopifnot(is.numeric(X) & is.numeric(y))  # check that X and y are numeric
stopifnot(rankMatrix(X)[[1]]==dim(X)[2])  # check that X is full rank
stopifnot(is.list(lambda))
y = as.matrix(y)
y <- y - mean(y)
X <- apply(X, 2, function(z) (z - mean(z))/sd(z) )
pcs <- svd(X, nv=npcs)
d.scree <- pcs$d^2 / sum(pcs$d^2)
Z <- X %*% pcs$v
yhat <- Z %*% solve(t(Z) %*% Z) %*% t(Z) %*% y
# pve visualization
plot(cumsum(d.scree), xlab="Num PCs", ylab="cumulative PVE", main="Percent Variance Explained")
# factor loadings visualization
floads <- as_tibble(pcs$v) %>%
`colnames<-`(paste0("PC", seq(1, npcs))) %>%
mutate(coef=colnames(X)) %>% relocate(coef)
p1 <- ggplot(floads) + geom_point(aes(x=PC1, y=PC2)) +
annotate("text", x=floads$PC1 + 0.12,y=floads$PC2,label=floads$coef) +
ggtitle("Principal Components - Factor Loadings")
# loadings visualization
loads <- as_tibble(Z) %>%
`colnames<-`(paste0("PC", seq(1, npcs))) %>%
mutate(ind=rownames(X)) %>% relocate(ind)
p2 <- ggplot(loads) + geom_point(aes(x=PC1, y=PC2)) +
ggtitle("Principal Components - Data Reduction")
}
my.pca <- function(y, X, npcs=3) {
stopifnot(is.matrix(X) & is.vector(y))  # check that X is a matrix and y is a vector
stopifnot(length(y) == dim(X)[1])  # check that X and y have the right dimensions
stopifnot(sum(is.na(X) | is.infinite(X))==0)  # check that X has no NA or Inf values
stopifnot(sum(is.na(y) | is.infinite(y))==0)  # check that y has no NA or Inf values
stopifnot(is.numeric(X) & is.numeric(y))  # check that X and y are numeric
stopifnot(rankMatrix(X)[[1]]==dim(X)[2])  # check that X is full rank
stopifnot(is.list(lambda))
y = as.matrix(y)
y <- y - mean(y)
X <- apply(X, 2, function(z) (z - mean(z))/sd(z) )
pcs <- svd(X, nv=npcs)
d.scree <- pcs$d^2 / sum(pcs$d^2)
Z <- X %*% pcs$v
yhat <- Z %*% solve(t(Z) %*% Z) %*% t(Z) %*% y
# pve visualization
plot(cumsum(d.scree), xlab="Num PCs", ylab="cumulative PVE", main="Percent Variance Explained")
# factor loadings visualization
floads <- as_tibble(pcs$v) %>%
`colnames<-`(paste0("PC", seq(1, npcs))) %>%
mutate(coef=colnames(X)) %>% relocate(coef)
p1 <- ggplot(floads) + geom_point(aes(x=PC1, y=PC2)) +
annotate("text", x=floads$PC1 + 0.12,y=floads$PC2,label=floads$coef) +
ggtitle("Principal Components - Factor Loadings")
# loadings visualization
loads <- as_tibble(Z) %>%
`colnames<-`(paste0("PC", seq(1, npcs))) %>%
mutate(ind=rownames(X)) %>% relocate(ind)
p2 <- ggplot(loads) + geom_point(aes(x=PC1, y=PC2)) +
ggtitle("Principal Components - Data Reduction")
p1+p2
}
data(mtcars)
y <- mtcars %>% pull(mpg)
X <- mtcars %>% select(cyl, disp, hp, drat, wt) %>% as.matrix
npcs <- 2
my.pca(y, X, npcs)
my.pca <- function(y, X, npcs=3) {
stopifnot(is.matrix(X) & is.vector(y))  # check that X is a matrix and y is a vector
stopifnot(length(y) == dim(X)[1])  # check that X and y have the right dimensions
stopifnot(sum(is.na(X) | is.infinite(X))==0)  # check that X has no NA or Inf values
stopifnot(sum(is.na(y) | is.infinite(y))==0)  # check that y has no NA or Inf values
stopifnot(is.numeric(X) & is.numeric(y))  # check that X and y are numeric
stopifnot(rankMatrix(X)[[1]]==dim(X)[2])  # check that X is full rank
stopifnot(is.list(lambda))
y = as.matrix(y)
y <- y - mean(y)
X <- apply(X, 2, function(z) (z - mean(z))/sd(z) )
pcs <- svd(X, nv=npcs)
d.scree <- pcs$d^2 / sum(pcs$d^2)
Z <- X %*% pcs$v
yhat <- Z %*% solve(t(Z) %*% Z) %*% t(Z) %*% y
# pve visualization
plot(cumsum(d.scree), xlab="Num PCs", ylab="cumulative PVE", main="Percent Variance Explained")
# factor loadings visualization
floads <- as_tibble(pcs$v) %>%
`colnames<-`(paste0("PC", seq(1, npcs))) %>%
mutate(coef=colnames(X)) %>% relocate(coef)
p1 <- ggplot(floads) + geom_point(aes(x=PC1, y=PC2)) +
annotate("text", x=floads$PC1 + 0.12,y=floads$PC2,label=floads$coef) +
ggtitle("Factor Loadings")
# loadings visualization
loads <- as_tibble(Z) %>%
`colnames<-`(paste0("PC", seq(1, npcs))) %>%
mutate(ind=rownames(X)) %>% relocate(ind)
p2 <- ggplot(loads) + geom_point(aes(x=PC1, y=PC2)) +
ggtitle("Data Reduction")
p1+p2
}
data(mtcars)
y <- mtcars %>% pull(mpg)
X <- mtcars %>% select(cyl, disp, hp, drat, wt) %>% as.matrix
npcs <- 2
my.pca(y, X, npcs)
library(tidyverse)
setwd("Downloads/data2models")
ls
setwd("mimosca")
exp <- read_csv("data/exp_0.txt.gz")
exp <- read_csv("data/exp_0.txt.gz", skip=2)
exp <- read_csv("data/exp_0.txt", skip=2)
exp <- read_tsv("data/exp_0.txt", skip=2)
library(vroom)
install.packages("vroom")
exp <- vroom("data/exp_0.txt", skip=2)
library(vroom)
exp <- vroom("data/exp_0.txt", skip=2)
exp <- vroom("data/exp_0.txt", skip=2, col_names="cell_id", "gene_id", "counts")
exp <- vroom("data/exp_0.txt", skip=2, col_names=c("cell_id", "gene_id", "counts"))
cell_names <- vroom("../data/cellnames_0.csv")
setwd("code")
cell_names <- vroom("../data/cellnames_0.csv")
cell_names <- vroom("../data/cellnames_0.csv", col_names=c("cell_id", "cell_names"))
gene_names <- vroom("../data/genenames_0.csv", col_names=c("gene_id", "gene_names"))
cell_names <- vroom("../data/cellnames_0.csv", col_names=c("cell_id", "cell_names"), skip=1)
gene_names <- vroom("../data/genenames_0.csv", col_names=c("gene_id", "gene_names"), skip=1)
gene_names <- vroom("../data/genenames_0.csv", col_names=c("gene_id", "gene_names"), skip=1) %>%
mutate(hgnc=str_extract(gene_names, "[^_]+$")) %>%
mutate(ensg=str_extract(gene_names, "[^_]+"))
sum(duplicated(gene_names$hgnc))
sum(duplicated(gene_names$ensg))
cbc_gbc <- vroom("../data/cbc_gbc_dict_0.csv")
View(cbc_gbc)
